import argparse
import pickle
import h5py
import numpy as np
from pathlib import Path

import sys, os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.pardir))

from data.imagenet import extract_imagenet_id_details


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--imagenet_w2v_hdf5', required=True, type=Path,
                        help='ImageNet_w2v.hdf5 generated by "convert_mat_file.py"')
    parser.add_argument('--imagenet_w2v_extra_pkl', required=True, type=Path,
                        help='ImageNet_w2v_extra.pkl generated by "convert_mat_file.py"')
    parser.add_argument('--splits', type=str, default='trainval',
                        choices=['trainval', 'ALL'])
    parser.add_argument('--output_file', type=Path,
                        default=Path.cwd() / 'imagenet1k_w2v_feats.pkl')
    return parser.parse_args()


def main(args):

    imagenet_id_details = extract_imagenet_id_details(args.imagenet_w2v_extra_pkl)

    with h5py.File(args.imagenet_w2v_hdf5, 'r') as f_feats:

        no_w2v_loc = (np.array(f_feats['no_w2v_loc']) - 1).astype(np.int64)  # Matlab format: start with 1
        if args.splits == 'trainval':
            assert no_w2v_loc.min() > 1000
            imagenet_id_features = {i + 1: f_feats['w2v'][i].astype(np.float32) for i in range(1000)}

        elif args.splits == 'ALL':
            imagenet_id_features = {i + 1: f_feats['w2v'][i].astype(np.float32)
                                    for i in range(f_feats['w2v'].shape[0])
                                    if i not in set(no_w2v_loc)}

        else:
            ValueError(f'{args.splits}')

    x = {}
    for imagenet_id, feats in imagenet_id_features.items():
        wnid, phrases = imagenet_id_details[imagenet_id]
        x[imagenet_id] = {
            'wnid': wnid,
            'phrases': phrases,
            'feats': feats,
        }

    with open(args.output_file, 'wb') as f:
        pickle.dump(x, f)


if __name__ == '__main__':
    main(parse_args())
